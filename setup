#!/usr/bin/env bash

# Commands
run_playbook=1  # Run playbook as default command
syntax_check=0  # Run command to check syntax
list_tags=0     # Run command to list tags

# Setup options
install_roles=1		# Install Ansible roles
install_ansible=1	# Install Ansible
print_versions=0 	# Print Python and Ansible versions
force_update_roles=0	# Force Ansible roles to be updated

# macOS specific setup options
install_homebrew=1	# Install Homebrew
ansible_homebrew=1	# Force use of Ansible from Homebrew

# Environment configuration
deploy_env="local"

# Local variables
local_vars_file="machine.yaml"

# Ansible playbook options
ansible_playbook="playbooks/main.yml"
ansible_roles="playbooks/roles"
ansible_roles_opts=""
ansible_tags=""
ansible_skip_tags=""
ansible_verbose=0
ansible_become=0

# Ansible version test
required_ansible_version="2.4"

###
# Print error into STDERR
###
function error {
    echo "$@" 1>&2
}

###
# Print usage help
###
function show_help {
    echo "Usage: $0"
    echo " -h         Show this help"
    echo " -f         Force update of Ansible roles"
    echo " -v         Verbose mode"
    echo " -n         Do not run Ansible playbook"
    echo " -q         Do not install Ansible requirements"
    echo " -l         List available Ansible tags"
    echo " -s         Ansible playbook syntax check"
    echo " -t TAGS    Run Ansible with the given comma separated list of tags"
    echo " -i TAGS    Skip the given list of tags"
}

###
# Get Ansible version
###
function get_ansible_version {
    $(ansible_bin_prefix)ansible --version | grep "^ansible" | awk '{ print $2 }'
}

###
# Check Ansible version
###
function check_ansible_version {
    local IFS=.
    local required=($1)
    local installed_ansible_version=""
    installed_ansible_version=$(get_ansible_version)
    if [ -z "$installed_ansible_version" ]; then
        return 1
    fi
    local installed=($installed_ansible_version)
    if ((${installed[0]} < ${required[0]})); then
        return 1
    fi
    if ((${installed[1]} < ${required[1]})); then
        return 1
    fi
    return 0
}

###
# Install dependencies on macOS
###
function install_macos_dependencies {
    if [ "$install_homebrew" == "1" ]; then
        install_xcode_cli
        install_homebrew
    fi
    if [ "$install_ansible" == "1" ]; then
        install_ansible
    fi
}

###
# Install Xcode Command Line Tools
###
function install_xcode_cli {
    if test $(which gcc); then
        return 0
    fi
    local errmsg="Failed to install Xcode Command Line Tools"
    echo "*** Installing Xcode Command Line Tools..."
    xcode-select --install \
        || { error "${errmsg}"; exit 1; }
}

###
# Install Homebrew
###
function install_homebrew {
    if test "$(which brew)"; then
        return 0
    fi
    local url="https://raw.githubusercontent.com"
    url="${url}/Homebrew/install/master/install"
    local errmsg="Failed to install Homebrew"
    echo "*** Installing Homebrew..."
    ruby -e "$(curl -fsSL ${url})" \
        || { error "${errmsg}"; exit 1; }
}

###
# Install Ansible
###
function install_ansible {
    if test "$(which ansible)"; then
        # If we don't require Ansible from Homebrew
        if [ "${ansible_homebrew}" == "0" ]; then
            return 0
        fi
        # Check if Ansible is installed with Homebrew
        if [ "$(brew --prefix ansible)" != "" ]; then
            return 0
        fi
    fi
    install_ansible_with_homebrew
}

###
# Install Ansible with Homebrew
###
function install_ansible_with_homebrew {
    local errmsg="Failed to install Ansible"
    echo "*** Installing Ansible with Homebrew..."
    brew install ansible \
        || { error "${errmsg}"; exit 1; }
}

###
# Install Ansible roles
###
function install_ansible_roles {
    local errmsg="Failed to install Ansible roles"
    echo "*** Installing Ansible roles..."
    $(ansible_bin_prefix)ansible-galaxy install \
        -r requirements.yml \
        -p ${ansible_roles} \
        ${ansible_roles_opts} \
        || { error "${errmsg}"; exit 1; }
}

###
# Ansible binary prefix
###
function ansible_bin_prefix {
    if [ "${ansible_homebrew}" == "1" ]; then
        echo "$(brew --prefix ansible)/bin/"
    fi
}

###
# Run Ansible playbook
###
function run_ansible_playbook {

    local ansible_opts=""

    if [ -e "${local_vars_file}" ]; then
        echo "*** Loading variables from ${local_vars_file}"
        ansible_opts="--extra-vars @${local_vars_file}"
    fi

    if [ "${ansible_verbose}" == "1" ]; then
        ansible_opts="-v ${ansible_opts}"
    fi

    if [ "${ansible_tags}" != "" ]; then
        ansible_opts="--tags=${ansible_tags} ${ansible_opts}"
    fi

    if [ "${ansible_skip_tags}" != "" ]; then
        ansible_opts="--skip-tags=${ansible_skip_tags} ${ansible_opts}"
    fi

    if [ "${ansible_become}" == "1" ]; then
        ansible_opts="--become ${ansible_opts}"
        sudo true || exit 1
    fi

    $(ansible_bin_prefix)ansible-playbook ${ansible_playbook} \
        $(ansible_inventory) \
        ${ansible_opts}

}

###
# Check Ansible playbook syntax
###
function check_ansible_playbook_syntax {
    $(ansible_bin_prefix)ansible-playbook ${ansible_playbook} \
        $(ansible_inventory) \
        --syntax-check
}

###
# Ansible inventory options
###
function ansible_inventory {
    local ansible_opts=""
    if [ "${deploy_env}" != "" ]; then
        deploy_env_err="Could not find inventory file for ${deploy_env}"
        [ -e "inventory/${deploy_env}" ] \
            || { error "${deploy_env_err}"; exit 1; }
        ansible_opts="-i inventory/${deploy_env} ${ansible_opts}"
    fi
    echo ${ansible_opts}
}

###Â 
# List tags available in Ansible playbooks
###
function ansible_playbook_list_tags {
    $(ansible_bin_prefix)ansible-playbook ${ansible_playbook} \
        $(ansible_inventory) \
        --list-tags
}

###
# Setup dependencies
###
function setup_dependencies {

    if test "$(uname)" = "Darwin"; then
        install_macos_dependencies
    elif test "$(uname)" = "Linux"; then
        error "Linux is not supported"
        exit 1
    else
        error "Your system is not supported"
        exit 1
    fi

    if test ! "$(which ansible)"; then
        error "Your system is not supported"
        exit 1
    fi

    local ansible_err="Ansible not found"
    $(ansible_bin_prefix)ansible --version \
        || { error "${ansible_err}"; exit 1; }
}

###
# Configuration
###
function configure {
    ansible_become=0
}

###
# Parse command line options
###
while getopts ":hfcnqlsvt:i:" opt; do
    case $opt in
        h)
            show_help
            exit 0
            ;;
        f)
            force_update_roles=1
            ;;
        n)
            run_playbook=0
            ;;
        q)
            install_roles=0
            install_ansible=0
            install_homebrew=0
            ;;
        l)
            list_tags=1
            run_playbook=0
            ;;
        s)
            syntax_check=1
            run_playbook=0
            ;;
        v)
            ansible_verbose=1
            print_versions=1
            ;;
        i)
            ansible_skip_tags=$OPTARG
            ;;
        t)
            ansible_tags=$OPTARG
            ;;
        \?)
            error "Invalid option: -$OPTARG"
            show_help
            exit 1
            ;;
        :)
            error "Option -$OPTARG requires an argument"
            exit 1
            ;;
    esac
done

# Configure options
configure

# Setup dependencies
setup_dependencies

if [ "$print_versions" == "1" ]; then
    python --version
    ansible --version
fi

if ! check_ansible_version $required_ansible_version; then
    error "Ansible $required_ansible_version required"
    exit 1
fi

if [ "$force_update_roles" == "1" ]; then
    ansible_roles_opts="${ansible_roles_opts} --force"
fi

if [ "$install_roles" == "1" ]; then
    install_ansible_roles
fi

if [ "$list_tags" == "1" ]; then
    ansible_playbook_list_tags
elif [ "$syntax_check" == "1" ]; then
    check_ansible_playbook_syntax
elif [ "$run_playbook" == "1" ]; then
    run_ansible_playbook
fi
